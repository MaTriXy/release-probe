apply plugin: 'jacoco'

project.afterEvaluate {
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }
    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }

    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            // ignore release build type and prod flavor
            if (buildTypeName == "release" || productFlavorName == "prod") return

            def sourceName
            if (!productFlavorName) {
                sourceName = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
            }

            def testTaskName = "test${sourceName.capitalize()}UnitTest"
            // create task 'createFlavorTypeUnitTestCoverageReport'
            task "create${sourceName.capitalize()}UnitTestCoverageReport"(type: JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Creates unit test coverage report for the ${sourceName.capitalize()} variant."

                // TODO update
                def fileFilter = [
                        '**/R.class',
                        '**/R$*.class',
                        '**/*$ViewInjector*.*',
                        '**/*$ViewBinder*.*',
                        '**/BuildConfig.*',
                        '**/Manifest*.*',
                        '**/*$*.class',
                        '**/di/**',
                        '**/*Dagger*.*',
                        '**/*MembersInjector*.*',
                        '**/*Component.*',
                        '**/*Module.*',
                        '**/*Activity.*',
                        '**/*Fragment.*',
                        '**/*App.*',
                        '**/DebugTree.*',
                        '**/constant/**',
                        '**/data/disk/**',
                        '**/data/**/api/**/Mock*Service.*',
                        '**/domain/**/model/*.*',
                        '**/ychescale9/testing/**',
                        '**/ychescale9/infra/**',
                        '**/ychescale9/networking/**',
                        '**/ychescale9/analytics/**',
                        '**/ychescale9/bugsnag-tree/**',
                        '**/ychescale9/uitest/**'
                ]

                classDirectories = fileTree(dir: "${buildDir}/tmp/kotlin-classes/$sourceName", excludes: fileFilter)
                def coverageSourceDirs = [
                        "src/main/java",
                        "src/common/java",
                        "src/$productFlavorName/java",
                        "src/$buildTypeName/java"
                ]
                additionalSourceDirs = files(coverageSourceDirs)
                sourceDirectories = files(coverageSourceDirs)
                executionData = fileTree(dir: project.buildDir, includes: ["jacoco/${testTaskName}.exec"])

                reports {
                    xml.enabled = true
                    html.enabled = true
                }
            }
        }
    }
}
